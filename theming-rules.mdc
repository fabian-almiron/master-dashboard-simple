# CMS TailWinds Theme Creation Rules for AI

## PROJECT CONTEXT
You are building a theme for CMS TailWinds, a Next.js-based content management system with auto-discovery of UI components. The theme will be dropped into a `/themes/[theme-name]/` directory and must work immediately with the CMS's component auto-discovery system.

## CRITICAL REQUIREMENTS

### 1. FOLDER STRUCTURE (MANDATORY)
Create this exact structure:
```
theme-name/
├── ui/                           # REQUIRED - All UI components go here
│   ├── Header.tsx               # REQUIRED - Layout component
│   ├── Footer.tsx               # REQUIRED - Layout component  
│   ├── DNDArea.tsx              # REQUIRED - Template content area
│   ├── Hero.tsx                 # Content block component
│   ├── Features.tsx             # Content block component
│   ├── CTA.tsx                  # Content block component
│   ├── Blog.tsx                 # Content block component
│   ├── Pricing.tsx              # Content block component
│   ├── Testimonials.tsx         # Content block component
│   └── tailwind-components/     # OPTIONAL - Utility components
│       ├── Button.tsx           # Sub-component (no metadata needed)
│       ├── Card.tsx             # Sub-component (no metadata needed)
│       └── Badge.tsx            # Sub-component (no metadata needed)
├── auto-register.tsx            # REQUIRED - Initial version must be created
├── register-blocks.tsx          # REQUIRED - Simple export re-export file
├── styles.css                  # REQUIRED - Theme CSS variables and styles
├── tailwind.config.ts          # REQUIRED - Tailwind configuration
├── main.js                     # OPTIONAL - JavaScript functionality
└── README.md                   # OPTIONAL - Theme documentation
```

### 2. COMPONENT METADATA (CRITICAL)
Every main UI component MUST export metadata using this EXACT format:

```typescript
import { ComponentInfo } from '@/lib/cms-types'

// Component metadata - exported for automatic registration
export const metadata: ComponentInfo = {
  type: 'ComponentName',           // Must match component function name
  name: 'Display Name',            // Human-readable name for admin
  description: 'Component description for admin interface',
  category: 'content-blocks',      // See categories below
  icon: 'IconName',               // Lucide React icon name
}

export default function ComponentName() {
  return (
    <div>{/* Your component JSX */}</div>
  )
}
```

### 3. COMPONENT CATEGORIES
Use these exact categories:
- `'content-blocks'` - Hero, Features, CTA, Blog, Pricing, Testimonials, Newsletter
- `'layout'` - Header, Footer, DNDArea
- `'ui-primitives'` - Basic reusable components
- `'page-templates'` - Full page layouts

### 4. REQUIRED COMPONENTS
These components are MANDATORY and must be created:

#### Header.tsx (category: 'layout')
```typescript
export const metadata: ComponentInfo = {
  type: 'Header',
  name: 'Header',
  description: 'Site navigation and branding header',
  category: 'layout',
  icon: 'Navigation',
}
```
- Must include site navigation
- Should use theme colors from CSS variables
- Include responsive mobile menu

#### Footer.tsx (category: 'layout')
```typescript
export const metadata: ComponentInfo = {
  type: 'Footer',
  name: 'Footer',  
  description: 'Site footer with links and information',
  category: 'layout',
  icon: 'Layout',
}
```
- Include copyright, links, social media
- Use theme colors and responsive design

#### DNDArea.tsx (category: 'layout')
```typescript
export const metadata: ComponentInfo = {
  type: 'DNDArea',
  name: 'Content Area',
  description: 'Dynamic content area for templates (Elementor-style)',
  category: 'layout', 
  icon: 'Square',
}
```
- This is a special component for template system
- Shows placeholder in template editing mode
- Renders actual page content when used in pages

### 5. CSS VARIABLES SYSTEM (REQUIRED)
Your styles.css MUST define theme colors using CSS custom properties:

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* Theme Primary Colors - Replace with your theme colors */
  --theme-primary-50: 255 247 237;   /* RGB values without commas */
  --theme-primary-100: 255 237 213;
  --theme-primary-200: 254 215 170;
  --theme-primary-300: 253 186 116;
  --theme-primary-400: 251 146 60;
  --theme-primary-500: 249 115 22;   /* Main brand color */
  --theme-primary-600: 234 88 12;
  --theme-primary-700: 194 65 12;
  --theme-primary-800: 154 52 18;
  --theme-primary-900: 124 45 18;

  /* Theme Gray Colors */
  --theme-gray-50: 249 250 251;
  --theme-gray-100: 243 244 246;
  --theme-gray-200: 229 231 235;
  --theme-gray-300: 209 213 219;
  --theme-gray-400: 156 163 175;
  --theme-gray-500: 107 114 128;
  --theme-gray-600: 75 85 99;
  --theme-gray-700: 55 65 81;
  --theme-gray-800: 31 41 55;
  --theme-gray-900: 17 24 39;
}
```

### 6. TAILWIND CONFIG (REQUIRED)
Create tailwind.config.ts with your theme's color palette:

```typescript
import type { Config } from "tailwindcss"

const config: Config = {
  darkMode: ["class"],
  content: [
    './ui/**/*.{ts,tsx}',
    './page-templates/**/*.{ts,tsx}',
    './*.{ts,tsx}',
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      fontFamily: {
        sans: ["Inter", "sans-serif"],
        heading: ["Inter", "sans-serif"],
      },
      colors: {
        'theme-primary': {
          50: '#fff7ed',
          100: '#ffedd5',
          200: '#fed7aa',
          300: '#fdba74',
          400: '#fb923c',
          500: '#f97316',  // Main brand color
          600: '#ea580c',
          700: '#c2410c',
          800: '#9a3412',
          900: '#7c2d12',
        },
        'theme-gray': {
          50: '#f9fafb',
          100: '#f3f4f6',
          200: '#e5e7eb',
          300: '#d1d5db',
          400: '#9ca3af',
          500: '#6b7280',
          600: '#4b5563',
          700: '#374151',
          800: '#1f2937',
          900: '#111827',
        },
      },
    },
  },
  plugins: [],
} satisfies Config

export default config
```

### 7. STYLING SYSTEM
ALWAYS use these CSS variable patterns in components:

```tsx
// Backgrounds
className="bg-theme-primary-500"        // Main brand color
className="bg-theme-primary-50"         // Light brand tint
className="bg-theme-gray-50"            // Light gray background

// Text colors  
className="text-theme-primary-600"      // Brand text
className="text-theme-gray-900"         // Dark text
className="text-theme-gray-600"         // Medium text

// Borders
className="border-theme-gray-200"       // Light borders
className="border-theme-primary-500"    // Brand borders

// Focus states
className="focus:ring-theme-primary-500" // Focus rings
```

### 8. DNDA COMPONENT TEMPLATE (REQUIRED)
Use this exact DNDArea implementation:

```typescript
import React from 'react'
import { ComponentInfo } from '@/lib/cms-types'

export const metadata: ComponentInfo = {
  type: 'DNDArea',
  name: 'Content Area',
  description: 'Dynamic content area for templates (Elementor-style)',
  category: 'layout',
  icon: 'Square',
}

interface DNDAreaProps {
  pageBlocks?: any[]
  isTemplateEdit?: boolean
  padding?: 'none' | 'small' | 'medium' | 'large'
  background?: string
}

export default function DNDArea({ 
  pageBlocks = [], 
  isTemplateEdit = false,
  padding = 'medium',
  background = ''
}: DNDAreaProps) {
  const paddingClass = {
    none: '',
    small: 'py-4',
    medium: 'py-8 md:py-12',
    large: 'py-12 md:py-24'
  }[padding]

  if (isTemplateEdit) {
    return (
      <div 
        className={`w-full ${paddingClass} ${background}`}
        style={background && !background.startsWith('bg-') ? { backgroundColor: background } : {}}
      >
        <div className="container mx-auto px-4">
          <div className="border-2 border-dashed border-theme-gray-300 rounded-lg p-8 text-center bg-theme-gray-50">
            <div className="text-theme-gray-600">
              <svg className="mx-auto h-12 w-12 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
              </svg>
              <h3 className="text-lg font-medium mb-2">Page Content Area</h3>
              <p className="text-sm">This area will display the page's content blocks when the template is used.</p>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (!pageBlocks || pageBlocks.length === 0) {
    return (
      <div className={`w-full ${paddingClass} ${background}`}>
        <div className="container mx-auto px-4">
          <div className="text-center py-12">
            <h2 className="text-2xl font-bold text-theme-gray-900 mb-4">No Content Available</h2>
            <p className="text-theme-gray-600">Add content blocks to this page to see them here.</p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className={`w-full ${paddingClass} ${background}`}>
      {/* Page blocks would be rendered here by the CMS */}
      <div className="container mx-auto px-4">
        {pageBlocks.map((block, index) => (
          <div key={block.id || index} className="mb-8">
            {/* Block content rendered by CMS */}
          </div>
        ))}
      </div>
    </div>
  )
}
```

### 9. COMPONENT EXAMPLES

#### Hero Component Template:
```typescript
import React from 'react'
import { ComponentInfo } from '@/lib/cms-types'

export const metadata: ComponentInfo = {
  type: 'Hero',
  name: 'Hero Section', 
  description: 'Main landing section with headline and CTA',
  category: 'content-blocks',
  icon: 'Zap',
}

export default function Hero() {
  return (
    <section className="w-full py-12 md:py-24 lg:py-32 bg-theme-gray-50">
      <div className="container px-4 md:px-6 mx-auto">
        <div className="flex flex-col items-center space-y-4 text-center">
          <div className="space-y-2">
            <h1 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl lg:text-6xl text-theme-gray-900">
              Your Compelling Headline
            </h1>
            <p className="mx-auto max-w-[700px] text-theme-gray-600 md:text-xl">
              Your supporting description that explains the value proposition clearly.
            </p>
          </div>
          <div className="space-x-4">
            <button className="inline-flex h-9 items-center justify-center rounded-md bg-theme-primary-500 px-4 py-2 text-sm font-medium text-white shadow transition-colors hover:bg-theme-primary-600">
              Get Started
            </button>
            <button className="inline-flex h-9 items-center justify-center rounded-md border border-theme-gray-200 bg-white px-4 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-theme-gray-50">
              Learn More
            </button>
          </div>
        </div>
      </div>
    </section>
  )
}
```

### 10. SUB-COMPONENTS (OPTIONAL)
Components in `/ui/tailwind-components/` or similar subdirectories are utility components that DON'T need metadata:

```typescript
// No metadata export needed for sub-components
export function Button({ children, variant = 'default', ...props }) {
  return (
    <button 
      className={`inline-flex items-center justify-center rounded-md px-4 py-2 text-sm font-medium transition-colors ${
        variant === 'default' 
          ? 'bg-theme-primary-500 text-white hover:bg-theme-primary-600' 
          : 'border border-theme-gray-200 bg-white hover:bg-theme-gray-50'
      }`}
      {...props}
    >
      {children}
    </button>
  )
}
```

### 11. ICONS
Use Lucide React icons only. Common icon names:
- Navigation, Menu, Layout, Grid, Square, Circle
- Zap, Star, Heart, Mail, Phone, User
- ArrowRight, ChevronRight, Plus, Minus, X
- Check, AlertCircle, Info, Settings

Import like: `import { Zap } from 'lucide-react'`

### 12. RESPONSIVE DESIGN
Use Tailwind's responsive classes:
```tsx
className="text-sm md:text-base lg:text-lg"      // Responsive text
className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3"  // Responsive grid
className="py-8 md:py-12 lg:py-16"              // Responsive spacing
className="px-4 md:px-6"                        // Responsive padding
```

### 13. AUTO-REGISTER FILE (REQUIRED INITIAL VERSION)
You MUST create an initial auto-register.tsx file for the theme to be discovered by the CMS. The CMS can later regenerate/update this file automatically.

Create this exact file structure:

```typescript
import React from 'react'
import type { ComponentInfo } from '@/lib/cms-types'

// Import theme styles
import './styles.css'

// Import all your main UI components with metadata
import Header, { metadata as HeaderMetadata } from './ui/Header'
import Footer, { metadata as FooterMetadata } from './ui/Footer'
import DNDArea, { metadata as DNDAreaMetadata } from './ui/DNDArea'
import Hero, { metadata as HeroMetadata } from './ui/Hero'
import Features, { metadata as FeaturesMetadata } from './ui/Features'
import CTA, { metadata as CTAMetadata } from './ui/CTA'
import Blog, { metadata as BlogMetadata } from './ui/Blog'
import Pricing, { metadata as PricingMetadata } from './ui/Pricing'
import Testimonials, { metadata as TestimonialsMetadata } from './ui/Testimonials'
// Add any additional components you create

export const themeName = 'Your Theme Name'                    // CUSTOMIZE THIS
export const themeDescription = 'Your theme description'      // CUSTOMIZE THIS  
export const themeAuthor = 'Your Name'                       // CUSTOMIZE THIS
export const themeVersion = '1.0.0'                          // CUSTOMIZE THIS

export const componentRegistry = {
  [HeaderMetadata.type]: Header,
  [FooterMetadata.type]: Footer,
  [DNDAreaMetadata.type]: DNDArea,
  [HeroMetadata.type]: Hero,
  [FeaturesMetadata.type]: Features,
  [CTAMetadata.type]: CTA,
  [BlogMetadata.type]: Blog,
  [PricingMetadata.type]: Pricing,
  [TestimonialsMetadata.type]: Testimonials,
  // Add any additional components you create
} as const

export const componentInfo: ComponentInfo[] = [
  HeaderMetadata,
  FooterMetadata,
  DNDAreaMetadata,
  HeroMetadata,
  FeaturesMetadata,
  CTAMetadata,
  BlogMetadata,
  PricingMetadata,
  TestimonialsMetadata,
  // Add any additional component metadata you create
]

export const getComponent = (type: string) => componentRegistry[type as keyof typeof componentRegistry]
export const renderComponent = (type: string, props: Record<string, any> = {}) => {
  const Component = getComponent(type)
  return Component ? <Component {...props} /> : null
}
export const getComponentInfo = (type: string) => componentInfo.find(info => info.type === type)
export const getAllComponents = () => componentInfo
export const getComponentsByCategory = (category: string) => componentInfo.filter(info => info.category === category)
```

**IMPORTANT NOTES:**
- This file is REQUIRED for theme discovery
- Update the imports when you add new components
- Add new components to both componentRegistry and componentInfo arrays
- The CMS can auto-regenerate this file later via the admin interface

### 14. REGISTER-BLOCKS FILE (REQUIRED)
Create a simple re-export file for compatibility:

```typescript
export * from './auto-register'
```

This single line file is required for theme compatibility.

### 15. MAIN.JS (OPTIONAL)
If you want JavaScript functionality:
```javascript
// Theme JavaScript functionality
window.YourThemeName = {
  init() {
    this.setupMobileMenu()
    this.setupScrollAnimations()
  },

  setupMobileMenu() {
    // Mobile menu toggle logic
  },

  setupScrollAnimations() {
    // Intersection Observer for animations
  }
}

// Auto-initialize when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => window.YourThemeName?.init())
} else {
  window.YourThemeName?.init()
}
```

### 16. AUTO-REGENERATION WORKFLOW
After creating the initial theme with auto-register.tsx:

**Theme Discovery Process:**
1. User drops theme into `/themes/[theme-name]/`
2. CMS automatically discovers theme (looks for auto-register.tsx)
3. Theme appears in admin interface at `/admin/themes`

**Component Auto-Discovery Process:**
1. Go to `/admin/themes` and click "Show Discovery Panel"
2. Click "Discover" to scan for all components in theme
3. Click "Regenerate" to update auto-register.tsx with any new components
4. Updated theme components appear in page builder

**When to Use Auto-Regeneration:**
- After adding new components to `/ui/` directory
- After modifying component metadata
- When components aren't appearing in page builder
- To ensure all discoverable components are registered

**Benefits:**
- Manual auto-register.tsx ensures theme discovery works
- Auto-regeneration keeps component registry in sync
- Prevents manual maintenance of import lists
- Automatically includes newly added components

### 17. TESTING YOUR THEME
When you finish creating the theme:
1. The user will drop it into `/themes/[theme-name]/`
2. CMS will automatically discover the theme (because auto-register.tsx exists)
3. Theme will appear in admin interface at `/admin/themes`
4. User can activate theme and use components immediately
5. User can optionally use auto-discovery to regenerate auto-register.tsx for any new components

## THEME DESIGN TIPS

### Color Schemes
Choose a cohesive color palette:
- Primary: Main brand color (500 shade)
- Light tints: 50-200 for backgrounds
- Dark shades: 600-900 for text and accents
- Gray scale: For text, borders, backgrounds

### Typography
- Use consistent font sizes and weights
- Establish hierarchy with Tailwind classes
- Use line-height for readability

### Spacing
- Use consistent spacing scale (4, 8, 12, 16, 24, 32px)
- Maintain visual rhythm
- Use Tailwind's spacing classes

### Animations
- Keep subtle and fast (300ms or less)
- Use for hover states, focus, and micro-interactions
- Don't overuse - focus on UX improvement

## COMMON MISTAKES TO AVOID

1. ❌ Missing metadata exports on main components
2. ❌ Wrong category names (must be exact)
3. ❌ Not using CSS variables for theme colors
4. ❌ Creating auto-register.tsx manually
5. ❌ Missing required Header, Footer, DNDArea components
6. ❌ Using hardcoded colors instead of theme variables
7. ❌ Wrong folder structure
8. ❌ ComponentInfo type mismatch with component name
9. ❌ Missing default export on components
10. ❌ Not making components responsive

## SUCCESS CHECKLIST

✅ Created required folder structure
✅ All main components export metadata with ComponentInfo type
✅ Used correct category names
✅ CSS variables defined in styles.css
✅ Tailwind config includes theme colors
✅ All components use theme-* color classes
✅ Header, Footer, DNDArea components created
✅ Components are responsive
✅ Used Lucide React icons only
✅ auto-register.tsx file created with proper imports and exports
✅ register-blocks.tsx file created (simple re-export)

## FINAL REMINDER
The theme will be dropped into `/themes/[theme-name]/` and must work immediately with the CMS's auto-discovery system. Follow these rules exactly for guaranteed compatibility.
